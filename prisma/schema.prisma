generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  admin    String
  Post     Post[]
  recipes  Recipe[]
  Comment  Comment[]
  Likes     Like[]
  savedRecipes SavedRecipe[]
}

model Recipe {
  id                Int                 @id @default(autoincrement())
  name              String
  details           String
  desc              String
  instructions      String
  imageUrl          String?
  image2Url         String?
  image3Url         String?
  userId            Int?
  Ingredient_recipe Ingredient_recipe[]
  User              User?               @relation(fields: [userId], references: [id])
  recipetags        Recipetags[]
  Tag               Tag?                @relation(fields: [tagId], references: [id])
  tagId             Int?
  Comment           Comment[]
  savedByUsers SavedRecipe[]
}

model Recipetags {
  id       Int    @id @default(autoincrement())
  tagId    Int
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  recipes    Recipe[]
  recipetags Recipetags[]
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Ingredient {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  ingredient_recipe Ingredient_recipe[]
}

model Ingredient_recipe {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  recipeId     Int
  measurement  String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model Comment {
  id       Int    @id @default(autoincrement())
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  Likes  Like[]
}


model Like {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int


  @@id([userId, commentId])
}

model SavedRecipe {
  id      Int      @id @default(autoincrement())
  userId  Int
  recipeId Int
  user    User     @relation(fields: [userId], references: [id])
  recipe  Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}
